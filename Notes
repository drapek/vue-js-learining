# Tooling
* nodejs
* vue cli (npm install -g @vue/cli)

# Useful commands
* start dev server:
```
npm run serve
```
* create app (-d means default)
```
vue create app-name -d 
```

# Visual Studio Code hints
* Ctr + Shift + P -> shortcut for commands eg. create terminal

# Vue notes:

* Data biding is done by <a v-bind:href="github" ...> or by <a :href="github" ...>. By direcitve v-bind we know that 
the value will be fetch from variable "github"

* Displaying text 
{{ var1 }} or v-text:="var1" in template

* event biding
v-on:click="method-name" or @click="method-name"

* 2way binding (when we want update variable using input)
v-model="var1"

* for looping
<ul v-for="elem in list" :key="elem.id">

* conditional element printing
<div v-if="variable">

* hidding elements (they aren't removed from DOM)
<div v-show="var">

* computed properties - they change only when their dependencies changes

computed : {
    fullName() {
        return `${this.hero.firstName} ${this.hero.LastName}`;
    }
}

* or we can use getter / setter
coputed: {
    fullName: {
        get() {
            return 'abc';
        },
        set(value) {
            this.last = value.split(' ')[1];
        }
    }
}

* lifecycle hooks - an methods called on some events
    - created - invoke on component creationg, very often used for data fetch, DOM is not yet mounted

* watchers 
    - reacts to data changes
    - the function is named the same as reactive value
    - ideal for asynchronous operations

watch: {
    hero(newVal, oldVal) {
        // logic
    },
    'selectedHero.capeCounter': {
        immediate: true, 
        handler(newVal, oldVal) {
            // logic
        },
    },
}

* filters
    - localfilter are defined in a component
    ```
    filters: {
        capitalize: function(value) {
            return '';
        },
    },
    ```
    - they can be applied in template {{ firstName | capitalize }}
    - they can be chained
    - arguments can be passed
    - global can be defined once 
    ```
    import Vue from 'vue'

    Vue.filter('capitalize', function(value) {
        return '';
    });
    ```

* defining the components
    - component can be defind as separate vue file
    - to use it in other component it must be imported. It can be done using it's name.
        ```
        import HeroDetail from '@/components/hero-detail';
        ```
    - and must be defined in component section
        ```
        components: { HeroDetail },
        ```
    - to put it on the parent component an html mark must be used
        ```
        <HeroDetail />
        ```

* props - send data from parent to child component
    ```
    // Parent
    <HeroDetail :hero="selectedHero" />

    // This will be in the child
    export default {
        props: {
            hero: {
                type: Object,
                default: () => {},
            }
        }
    }
    ```
    <... :hero /> - dynamic prop
    <... hero /> - static prop

    - components can have validation
    ```
    props: {
        prop1: {
            type: String,
            validator: function(value) { return value !== '' };
        }
    }
    ```

* emit - sending data from child to parent
    - in parent these prop should be implemeted
    ```
    <HeroDetail v-if="selectedHero" :hero="selectedHero" @cancel="cancelHero" @save="saveHero" />
    ```
    -the child should access it by 
    ```
    cancelHero() { this.$emit('cancel', this.clonedHero);

    ```

* mixins - for sharing common logic across components
    - The strategy for merging mixin object is:
        - methods, components, computeds, data - merged, but component are overriding the mixins
        - watch and hooks - both run, mixins before components

* Getting Data
    - axios - promise based http client 
    ```
    await axios({method: 'post', url: 'api/heroes', headers: ..., data: {...}})
    ```
    - because it is promise, we need to add async dyrecitve to a parent function eg.
    ```
    methods: {
        async getHeroes() {
            await axios.get('api/heroes');
        }
    }
    ```

* Routing
   - Vue Router
   - install via vue add router
   - it will create route.js. In this file you attach te component on two ways:
        - direct way: component: ComponentName, but it must be imported earlier
        - lazy way: component: () =>
        import(/* webpackChunkName: "bundle-heroes" */ './views/hero-detail.vue'),
      // component: HeroDetail,
      props: parseProps,

* Vuex - managing data state 
    - central store of managing the data 
    - installing: vue add vuex
    - adding storage data to component
        // 1st way
        heroes() {
           return this.$store.state.heroes;
         }
        
        // 2nd way
         ...mapState({heroes: state => state.heroes}),
        // 3rd way
        ...mapState({ heroes: 'heroes'}),
    - store is edited always by mutations
    - actions starts mutations

* Cloning the objects
    this.hero = { ...this.getHeroById(this.id) }; // But it doesn't make a deep clone

    // Deep clone (lodash package)
    this.hero = deepClone(object)

# Javascript trics

* To fetch only one intresting parameter insted of whole object we can use:
    ```
    async addHeroAction({commit}, hero) {}
    ```
    Instead of
    ```
    async addHeroAction(context, hero) {context.commit = ''}
    ```